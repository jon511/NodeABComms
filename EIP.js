let binary = require('./binaryConverter')

const contextObject = {
    0: [0x57, 0x65, 0x27, 0x72, 0x65, 0x00, 0x00, 0x00],
    1: [0x6e, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    2: [0x73, 0x74, 0x72, 0x61, 0x6e, 0x67, 0x00, 0x00],
    3: [0x65, 0x72, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00],
    4: [0x74, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    5: [0x6c, 0x6f, 0x76, 0x65, 0x00, 0x00, 0x00, 0x00],
    6: [0x59, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00],
    7: [0x6b, 0x6e, 0x6f, 0x77, 0x00, 0x00, 0x00, 0x00],
    8: [0x74, 0x68, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00],
    9: [0x72, 0x75, 0x6c, 0x65, 0x73, 0x00, 0x00, 0x00],
    10: [0x61, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00],
    11: [0x73, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    12: [0x64, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    13: [0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    14: [0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    15: [0x66, 0x75, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00],
    16: [0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x00, 0x00],
    17: [0x6d, 0x65, 0x6e, 0x74, 0x27, 0x73, 0x00, 0x00],
    18: [0x77, 0x68, 0x61, 0x74, 0x00, 0x00, 0x00, 0x00],
    19: [0x49, 0x27, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00],
    20: [0x74, 0x68, 0x69, 0x6e, 0x6b, 0x00, 0x00, 0x00],
    21: [0x69, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00],
    22: [0x6f, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    23: [0x59, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00],
    24: [0x77, 0x6f, 0x75, 0x6c, 0x64, 0x6e, 0x74, 0x00],
    25: [0x67, 0x65, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00],
    26: [0x74, 0x68, 0x69, 0x73, 0x00, 0x00, 0x00, 0x00],
    27: [0x66, 0x72, 0x6f, 0x6d, 0x00, 0x00, 0x00, 0x00],
    28: [0x61, 0x6e, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00],
    29: [0x6f, 0x74, 0x68, 0x65, 0x72, 0x00, 0x00, 0x00],
    30: [0x67, 0x75, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00],
    31: [0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    32: [0x6a, 0x75, 0x73, 0x74, 0x00, 0x00, 0x00, 0x00],
    33: [0x77, 0x61, 0x6e, 0x6e, 0x61, 0x00, 0x00, 0x00],
    34: [0x74, 0x65, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00],
    35: [0x79, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00],
    36: [0x68, 0x6f, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00],
    37: [0x49, 0x27, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00],
    38: [0x66, 0x65, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x00],
    39: [0x47, 0x6f, 0x74, 0x74, 0x61, 0x00, 0x00, 0x00],
    40: [0x6d, 0x61, 0x6b, 0x65, 0x00, 0x00, 0x00, 0x00],
    41: [0x79, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00],
    42: [0x75, 0x6e, 0x64, 0x65, 0x72, 0x00, 0x00, 0x00],
    43: [0x73, 0x74, 0x61, 0x6e, 0x64, 0x00, 0x00, 0x00],
    44: [0x4e, 0x65, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00],
    45: [0x67, 0x6f, 0x6e, 0x6e, 0x61, 0x00, 0x00, 0x00],
    46: [0x67, 0x69, 0x76, 0x65, 0x00, 0x00, 0x00, 0x00],
    47: [0x79, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00],
    48: [0x75, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    49: [0x4e, 0x65, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00],
    50: [0x67, 0x6f, 0x6e, 0x6e, 0x61, 0x00, 0x00, 0x00],
    51: [0x6c, 0x65, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00],
    52: [0x79, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00],
    53: [0x64, 0x6f, 0x77, 0x6e, 0x00, 0x00, 0x00, 0x00],
    54: [0x4e, 0x65, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00],
    55: [0x67, 0x6f, 0x6e, 0x6e, 0x61, 0x00, 0x00, 0x00],
    56: [0x72, 0x75, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00],
    57: [0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00],
    58: [0x61, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00],
    59: [0x64, 0x65, 0x73, 0x65, 0x72, 0x74, 0x00, 0x00],
    60: [0x79, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00],
    61: [0x4e, 0x65, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00],
    62: [0x67, 0x6f, 0x6e, 0x6e, 0x61, 0x00, 0x00, 0x00],
    63: [0x6d, 0x61, 0x6b, 0x65, 0x00, 0x00, 0x00, 0x00],
    64: [0x79, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00],
    65: [0x63, 0x72, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00],
    66: [0x4e, 0x65, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00],
    67: [0x67, 0x6f, 0x6e, 0x6e, 0x61, 0x00, 0x00, 0x00],
    68: [0x73, 0x61, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00],
    69: [0x67, 0x6f, 0x6f, 0x64, 0x62, 0x79, 0x65, 0x00],
    70: [0x4e, 0x65, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00],
    71: [0x67, 0x6f, 0x6e, 0x6e, 0x61, 0x00, 0x00, 0x00],
    72: [0x74, 0x65, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00],
    73: [0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    74: [0x6c, 0x69, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00],
    75: [0x61, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00],
    76: [0x68, 0x75, 0x72, 0x74, 0x00, 0x00, 0x00, 0x00],
    77: [0x79, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00],
    78: [0x57, 0x65, 0x27, 0x76, 0x65, 0x00, 0x00, 0x00],
    79: [0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x00, 0x00, 0x00],
    80: [0x65, 0x61, 0x63, 0x68, 0x00, 0x00, 0x00, 0x00],
    81: [0x6f, 0x74, 0x68, 0x65, 0x72, 0x00, 0x00, 0x00],
    82: [0x66, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00],
    83: [0x73, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    84: [0x6c, 0x6f, 0x6e, 0x67, 0x00, 0x00, 0x00, 0x00],
    85: [0x59, 0x6f, 0x75, 0x72, 0x00, 0x00, 0x00, 0x00],
    86: [0x68, 0x65, 0x61, 0x72, 0x74, 0x27, 0x73, 0x00],
    87: [0x62, 0x65, 0x65, 0x6e, 0x00, 0x00, 0x00, 0x00],
    88: [0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x00, 0x00],
    89: [0x62, 0x75, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00],
    90: [0x59, 0x6f, 0x75, 0x27, 0x72, 0x65, 0x00, 0x00],
    91: [0x74, 0x6f, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00],
    92: [0x73, 0x68, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00],
    93: [0x74, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    94: [0x73, 0x61, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00],
    95: [0x69, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    96: [0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x00, 0x00],
    97: [0x77, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    98: [0x62, 0x6f, 0x74, 0x68, 0x00, 0x00, 0x00, 0x00],
    99: [0x6b, 0x6e, 0x6f, 0x77, 0x00, 0x00, 0x00, 0x00],
    100: [0x77, 0x68, 0x61, 0x74, 0x27, 0x73, 0x00, 0x00],
    101: [0x62, 0x65, 0x65, 0x6e, 0x00, 0x00, 0x00, 0x00],
    102: [0x67, 0x6f, 0x69, 0x6e, 0x67, 0x00, 0x00, 0x00],
    103: [0x6f, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    104: [0x57, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    105: [0x6b, 0x6e, 0x6f, 0x77, 0x00, 0x00, 0x00, 0x00],
    106: [0x74, 0x68, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00],
    107: [0x67, 0x61, 0x6d, 0x65, 0x00, 0x00, 0x00, 0x00],
    108: [0x61, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00],
    109: [0x77, 0x65, 0x27, 0x72, 0x65, 0x00, 0x00, 0x00],
    110: [0x67, 0x6f, 0x6e, 0x6e, 0x61, 0x00, 0x00, 0x00],
    111: [0x70, 0x6c, 0x61, 0x79, 0x00, 0x00, 0x00, 0x00],
    112: [0x69, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    113: [0x41, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00],
    114: [0x69, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    115: [0x79, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00],
    116: [0x61, 0x73, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00],
    117: [0x6d, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    118: [0x68, 0x6f, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00],
    119: [0x49, 0x27, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00],
    120: [0x66, 0x65, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x00],
    121: [0x44, 0x6f, 0x6e, 0x27, 0x74, 0x00, 0x00, 0x00],
    122: [0x74, 0x65, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00],
    123: [0x6d, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    124: [0x79, 0x6f, 0x75, 0x27, 0x72, 0x65, 0x00, 0x00],
    125: [0x74, 0x6f, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00],
    126: [0x62, 0x6c, 0x69, 0x6e, 0x64, 0x00, 0x00, 0x00],
    127: [0x74, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    128: [0x73, 0x65, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00],
    129: [0x4e, 0x65, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00],
    130: [0x67, 0x6f, 0x6e, 0x6e, 0x61, 0x00, 0x00, 0x00],
    131: [0x67, 0x69, 0x76, 0x65, 0x00, 0x00, 0x00, 0x00],
    132: [0x79, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00],
    133: [0x75, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    134: [0x4e, 0x65, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00],
    135: [0x67, 0x6f, 0x6e, 0x6e, 0x61, 0x00, 0x00, 0x00],
    136: [0x6c, 0x65, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00],
    137: [0x79, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00],
    138: [0x64, 0x6f, 0x77, 0x6e, 0x00, 0x00, 0x00, 0x00],
    139: [0x4e, 0x65, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00],
    140: [0x72, 0x75, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00],
    141: [0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x00, 0x00],
    142: [0x61, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00],
    143: [0x64, 0x65, 0x73, 0x65, 0x72, 0x74, 0x00, 0x00],
    144: [0x79, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00],
    145: [0x4e, 0x65, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00],
    146: [0x67, 0x6f, 0x6e, 0x6e, 0x61, 0x00, 0x00, 0x00],
    147: [0x6d, 0x61, 0x6b, 0x65, 0x00, 0x00, 0x00, 0x00],
    148: [0x79, 0x6f, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00],
    149: [0x63, 0x72, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00],
    150: [0x4e, 0x65, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00],
    151: [0x67, 0x6f, 0x6e, 0x6e, 0x61, 0x00, 0x00, 0x00],
    152: [0x73, 0x61, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00],
    153: [0x67, 0x6f, 0x6f, 0x64, 0x62, 0x79, 0x65, 0x00],
    154: [0x4e, 0x65, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00],
    155: [0x67, 0x6f, 0x6e, 0x6e, 0x61, 0xe2, 0x80, 0xa6],

}

function BuildRegisterSession(controller){

    //
    let eipCommand = [0x65, 0x00]
    let eipLength = [0x04, 0x00]
    let eipSessionHandle = controller.sessionHandle
    let eipStatus = [0x00, 0x00, 0x00, 0x00]
    let eipContext = controller.context
    let eipOptons = [0x00, 0x00, 0x00, 0x00]
    let eipProtocolVersion = [0x01, 0x00]
    let eipOptionFlag = [0x00, 0x00]

    return new Buffer(eipCommand.concat(eipLength, eipSessionHandle, eipStatus, eipContext, eipOptons, eipProtocolVersion, eipOptionFlag))
}

function ForwardOpenPacket(controller){

    let fwdOpen = buildCIPForwardOpen(controller)
    let rrDataHeader = buildEIPSendDataHeader(controller, fwdOpen.length)

    return new Buffer(rrDataHeader.concat(fwdOpen))
}

function buildCIPForwardOpen(controller){

    let cipService = [0x54]
    let cipPathSize = [0x02]
    let cipClassType = [0x20]
    let cipClass = [0x06]
    let cipInstanceType = [0x24]
    let cipInstance = [0x01]
    let cipPriority = [0x0a]
    let cipTimeoutTicks = [0x0e]

    let cipHead = cipService.concat(cipPathSize, cipClassType, cipClass, cipInstanceType, cipInstance, cipPriority, cipTimeoutTicks)

    let cipOTConnectionID = [0x02, 0x00, 0x00, 0x20]
    let cipTOConnectionID = [0x01, 0x00, 0x00, 0x20]
    let cipConnectionSerialNumber = controller.serialNumber
    let cipVendorID = controller.vendorID
    let cipOriginatorSerialNumber = controller.originatorSerialNumber
    let cipMultiplier = [0x03, 0x00, 0x00, 0x00]
    let cipOTRpi = [0x34, 0x12, 0x20, 0x00]
    let cipOTNetworkConnectionParameters = [0xf4, 0x43]
    let cipToRpi = [0x01, 0x40, 0x20, 0x00]
    let cipTONetworkConnectionParameters = [0xf4, 0x43]

    let cipTransportTrigger = [0xa3]

    let data = cipHead.concat(cipOTConnectionID, cipTOConnectionID, cipConnectionSerialNumber, cipVendorID, cipOriginatorSerialNumber, cipMultiplier, cipOTRpi, cipOTNetworkConnectionParameters, cipToRpi, cipTONetworkConnectionParameters, cipTransportTrigger)

    let connectionPath = []

    if (controller.micro800){
        connectionPath = [0x20, 0x02, 0x24, 0x01]
    }else {
        connectionPath = [0x01, controller.processorSlot, 0x20, 0x02, 0x24, 0x01]
    }

    let cPathSize = connectionPath.length / 2

    return data.concat(cPathSize, connectionPath)
}

function buildEIPSendDataHeader(controller, frameLen){

    let eipCommand = [0x6f, 0x00]
    let eipLength = binary.ConvertIntTo2BytesLittleEndian(16 + frameLen)
    let eipSessionHandle = controller.sessionHandle
    let eipStatus = [0x00, 0x00, 0x00, 0x00]
    let eipContext = controller.context
    let eipOptions = [0x00, 0x00, 0x00, 0x00]
    let eipInterfaceHandle = [0x00, 0x00, 0x00, 0x00]
    let eipTimeout = [0x00, 0x00]
    let eipItemCount = [0x02, 0x00]
    let eipItem1Type = [0x00, 0x00]
    let eipItem1Length = [0x00, 0x00]
    let eipItem2Type = [0xb2, 0x00]
    let eipItem2Length = binary.ConvertIntTo2BytesLittleEndian(frameLen)

    return eipCommand.concat(eipLength, eipSessionHandle, eipStatus, eipContext, eipOptions, eipInterfaceHandle, eipTimeout, eipItemCount, eipItem1Type, eipItem1Length, eipItem2Type, eipItem2Length)
}

function Build_EIP_CIP_Header(controller, tagIOI){

    if (controller.contextPointer === 155) {
        controller.contextPointer = 0
    }

    let eipConnectedDataLength = tagIOI.length + 2

    let eipCommand = [0x70, 0x00]
    let eipLength = binary.ConvertIntTo2BytesLittleEndian(22 + tagIOI.length)

    let eipSessionHandle = controller.sessionHandle
    let eipStatus = [0x00, 0x00, 0x00, 0x00]

    let eipContext = contextObject[controller.contextPointer]
    controller.contextPointer ++

    let eipOptions = [0x00, 0x00, 0x00, 0x00]
    let eipInterfaceHandle = [0x00, 0x00, 0x00, 0x00]
    let eipTimeout = [0x00, 0x00]
    let eipItemCount = [0x02, 0x00]
    let eipItem1ID = [0xa1, 0x00]
    let eipItem1Length = [0x04, 0x00]
    let eipItem1 = controller.otNetworkConnectionID
    let eipItem2ID = [0xb1, 0x00]
    let eipItem2Length = [eipConnectedDataLength, 0x00]

    let eipSequence = binary.ConvertIntTo2BytesLittleEndian(controller.sequenceCounter)

    controller.sequenceCounter ++
    controller.sequenceCounter = controller.sequenceCounter % 0x10000

    let eipHeaderFrame = eipCommand.concat(eipLength, eipSessionHandle, eipStatus, eipContext, eipOptions, eipInterfaceHandle, eipTimeout, eipItemCount, eipItem1ID, eipItem1Length,eipItem1, eipItem2ID, eipItem2Length, eipSequence)

    // return  new Buffer(eipHeaderFrame.concat(tagIOI))

    return new Buffer(eipHeaderFrame.concat(tagIOI))
}

module.exports = {BuildRegisterSession, ForwardOpenPacket, Build_EIP_CIP_Header}